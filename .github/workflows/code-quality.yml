name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety pylint

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --output-file=flake8-report.txt

    - name: Check code formatting with black
      run: |
        black --check --diff . || echo "Code formatting issues found"

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "Import sorting issues found"

    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional --output-file=mypy-report.txt || true

    - name: Lint with pylint
      run: |
        pylint **/*.py --output-format=text --reports=no --score=no --output=pylint-report.txt || true

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-reports
        path: |
          flake8-report.txt
          mypy-report.txt
          pylint-report.txt

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Run semgrep
      run: |
        semgrep --config=auto . --json --output=semgrep-report.json || true
        semgrep --config=auto . || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  complexity:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install complexity tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon

    - name: Measure code complexity
      run: |
        radon cc . -s --total-average
        radon mi . -s
        xenon . --max-absolute B --max-modules A --max-average A

    - name: Generate complexity reports
      run: |
        radon cc . -s --json > complexity-report.json
        radon mi . -s --json > maintainability-report.json

    - name: Upload complexity reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: complexity-reports
        path: |
          complexity-report.json
          maintainability-report.json

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle

    - name: Check docstring style
      run: |
        pydocstyle . --convention=google --add-ignore=D100,D101,D102,D103,D104 || true

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Audit dependencies
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json || true
        pip-audit || true

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit
        path: pip-audit-report.json

  code-quality-summary:
    runs-on: ubuntu-latest
    needs: [lint, security, complexity, documentation, dependency-check]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create quality summary
      run: |
        echo "# Code Quality Summary" > quality-summary.md
        echo "" >> quality-summary.md
        echo "## Job Results" >> quality-summary.md
        echo "- Lint: ${{ needs.lint.result }}" >> quality-summary.md
        echo "- Security: ${{ needs.security.result }}" >> quality-summary.md
        echo "- Complexity: ${{ needs.complexity.result }}" >> quality-summary.md
        echo "- Documentation: ${{ needs.documentation.result }}" >> quality-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> quality-summary.md
        
        echo "" >> quality-summary.md
        echo "## Artifacts Generated" >> quality-summary.md
        echo "Check the artifacts section for detailed reports from each tool." >> quality-summary.md

    - name: Upload quality summary
      uses: actions/upload-artifact@v3
      with:
        name: quality-summary
        path: quality-summary.md
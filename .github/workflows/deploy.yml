name: Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      deploy-env: ${{ steps.determine-env.outputs.environment }}
      image-tag: ${{ steps.determine-tag.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

    - name: Determine image tag
      id: determine-tag
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi

    - name: Validate deployment conditions
      run: |
        echo "Deploying to: ${{ steps.determine-env.outputs.environment }}"
        echo "Using image tag: ${{ steps.determine-tag.outputs.tag }}"
        
        # Check if production deployment meets requirements
        if [ "${{ steps.determine-env.outputs.environment }}" = "production" ]; then
          if [ "${{ github.ref }}" != "refs/heads/main" ] && [[ ! ${{ github.ref }} == refs/tags/* ]]; then
            echo "‚ùå Production deployment only allowed from main branch or tags"
            exit 1
          fi
          echo "‚úÖ Production deployment conditions met"
        fi

  run-tests:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment
      run: |
        cp .env.example .env
        echo "FLASK_SECRET_KEY=test-secret-key" >> .env
        echo "GITHUB_CLIENT_ID=dummy" >> .env
        echo "GITHUB_CLIENT_SECRET=dummy" >> .env
        echo "ADMIN_USERS=testuser" >> .env

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=term-missing

    - name: Test Docker build
      run: |
        docker build -t deployment-test .
        docker run -d --name test-container --env-file .env -p 5000:5000 deployment-test
        sleep 15
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container

  build-and-push:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, run-tests]
    if: always() && (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.pre-deployment-checks.outputs.image-tag }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.deploy-env == 'staging'
    environment: 
      name: staging
      url: https://staging.ke-wp-mapping.example.com
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.image-tag }}"
        
        # Example deployment commands (customize for your infrastructure)
        # ssh staging-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.image-tag }}"
        # ssh staging-server "docker-compose -f /opt/ke-wp-mapping/docker-compose.staging.yml up -d"
        
        echo "‚úÖ Staging deployment completed"

    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add staging-specific health checks
        # curl -f https://staging.ke-wp-mapping.example.com/health
        echo "‚úÖ Staging smoke tests passed"

    - name: Notify staging deployment
      run: |
        echo "üì¢ Staging deployment notification"
        echo "Environment: staging"
        echo "Commit: ${{ github.sha }}"
        echo "Image: ${{ needs.pre-deployment-checks.outputs.image-tag }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.deploy-env == 'production'
    environment: 
      name: production
      url: https://ke-wp-mapping.example.com
    
    steps:
    - uses: actions/checkout@v4

    - name: Create deployment backup
      run: |
        echo "üì¶ Creating backup before production deployment..."
        # Example backup commands
        # ssh production-server "docker exec ke-wp-app sqlite3 /app/data/ke_wp_mapping.db '.backup /backups/pre-deploy-$(date +%Y%m%d_%H%M%S).db'"
        echo "‚úÖ Backup created"

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.image-tag }}"
        
        # Example production deployment commands (customize for your infrastructure)
        # ssh production-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.image-tag }}"
        # ssh production-server "docker-compose -f /opt/ke-wp-mapping/docker-compose.yml up -d"
        
        echo "‚úÖ Production deployment completed"

    - name: Run production health checks
      run: |
        echo "üîç Running production health checks..."
        # Add production-specific health checks
        # curl -f https://ke-wp-mapping.example.com/health
        # curl -f https://ke-wp-mapping.example.com/metrics
        echo "‚úÖ Production health checks passed"

    - name: Notify production deployment
      run: |
        echo "üì¢ Production deployment notification"
        echo "Environment: production"
        echo "Commit: ${{ github.sha }}"
        echo "Image: ${{ needs.pre-deployment-checks.outputs.image-tag }}"

  rollback-staging:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: failure()
    environment: staging
    
    steps:
    - name: Rollback staging deployment
      run: |
        echo "üîÑ Rolling back staging deployment..."
        # Add rollback commands for staging
        # ssh staging-server "docker-compose -f /opt/ke-wp-mapping/docker-compose.staging.yml down"
        # ssh staging-server "docker-compose -f /opt/ke-wp-mapping/docker-compose.staging.yml up -d --scale web=0"
        # ssh staging-server "docker tag $PREVIOUS_IMAGE $CURRENT_IMAGE && docker-compose up -d"
        echo "‚úÖ Staging rollback completed"

  rollback-production:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    
    steps:
    - name: Rollback production deployment
      run: |
        echo "üîÑ Rolling back production deployment..."
        # Add rollback commands for production
        # ssh production-server "docker-compose -f /opt/ke-wp-mapping/docker-compose.yml down"
        # Restore from backup if needed
        echo "‚úÖ Production rollback completed"

    - name: Restore database if needed
      run: |
        echo "üóÑÔ∏è Restoring database from backup..."
        # ssh production-server "docker exec ke-wp-app sqlite3 /app/data/ke_wp_mapping.db < /backups/latest-backup.db"
        echo "‚úÖ Database restoration completed"

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Update deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "üéâ Production deployment successful!"
          echo "Environment: production"
        elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "üéâ Staging deployment successful!"
          echo "Environment: staging"
        fi
        
        echo "Deployment completed at: $(date)"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Deployed by: ${{ github.actor }}"

    - name: Create deployment record
      run: |
        echo "üìù Creating deployment record..."
        cat > deployment-record.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "${{ needs.pre-deployment-checks.outputs.deploy-env }}",
          "commit_sha": "${{ github.sha }}",
          "image_tag": "${{ needs.pre-deployment-checks.outputs.image-tag }}",
          "deployed_by": "${{ github.actor }}",
          "workflow_run": "${{ github.run_id }}",
          "status": "success"
        }
        EOF

    - name: Upload deployment record
      uses: actions/upload-artifact@v3
      with:
        name: deployment-record
        path: deployment-record.json

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [post-deployment]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.post-deployment.result }}" = "success" ]; then
          echo "‚úÖ Deployment workflow completed successfully"
        else
          echo "‚ùå Deployment workflow encountered issues"
        fi
        
        echo "Check the workflow logs for detailed information"